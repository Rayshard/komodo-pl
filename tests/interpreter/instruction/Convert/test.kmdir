(program MyProgram
    (entry MyModule Main)
    (module MyModule
        (function Main (params) (returns)
            (Call MyModule I8Convert)
            (Call MyModule UI8Convert)
            (Call MyModule I16Convert)
            (Call MyModule UI16Convert)
            (Call MyModule I32Convert)
            (Call MyModule UI32Convert)
            (Call MyModule I64Convert)
            (Call MyModule UI64Convert)
            (Call MyModule F32Convert)
            (Call MyModule F64Convert)
            (Call MyModule BoolConvert)
            (Call MyModule ROPtrConvert)
            (Call MyModule RWPtrConvert)
            (Call MyModule RefConvert)
            (Call MyModule ArrayConvert)
            (Call MyModule FuncConvert)

            (Exit 0)
        )
        (function I8Convert (params) (returns)
            (Return)
        )
        (function UI8Convert (params) (returns)
            (Return)
        )
        (function I16Convert (params) (returns)
            (Return)
        )
        (function UI16Convert (params) (returns)
            (Return)
        )
        (function I32Convert (params) (returns)
            (Return)
        )
        (function UI32Convert (params) (returns)
            (Return)
        )
        (function I64Convert (params) (returns)
            (Convert (I64 100) I8 $stack)
            (Assert (pop I8) (I8 100))
            (Convert (I64 128) I8 $stack)
            (Assert (pop I8) (I8 -128))
            (Convert (I64 -1) I8 $stack)
            (Assert (pop I8) (I8 -1))

            (Convert (I64 100) UI8 $stack)
            (Assert (pop UI8) (UI8 100))
            (Convert (I64 256) UI8 $stack)
            (Assert (pop UI8) (UI8 0))
            (Convert (I64 257) UI8 $stack)
            (Assert (pop UI8) (UI8 1))
            (Convert (I64 -1) UI8 $stack)
            (Assert (pop UI8) (UI8 255))

            (Return)
        )
        (function UI64Convert (params) (returns)
            (Return)
        )
        (function F32Convert (params) (returns)
            (Return)
        )
        (function F64Convert (params) (returns)
            (Return)
        )
        (function BoolConvert (params) (returns)
            (Return)
        )
        (function ROPtrConvert (params) (returns)
            (Return)
        )
        (function RWPtrConvert (params) (returns)
            (Allocate (sizeof I64) $stack)
            (Convert (pop RWPtr) ROPtr $stack)
            (IsNull (pop ROPtr) $stack)
            (Assert (pop Bool) false)

            (Return)
        )
        (function RefConvert (params) (returns)
            (Allocate I64 $stack)
            (Duplicate)
            (Store 123 (pop (Ref I64)))

            (Convert (pop (Ref I64)) ROPtr $stack)
            (Load I64 (pop ROPtr) $stack)
            (Assert (pop I64) 123)

            (Return)
        )
        (function ArrayConvert (params) (returns)
            (Return)
        )
        (function FuncConvert (params) (returns)
            (Return)
        )
    )
)
